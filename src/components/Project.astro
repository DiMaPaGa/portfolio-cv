---
import type { ProjectModel, ApiResponse } from "../types/ProjectModel";
import ProjectCard from "./ProjectCard.astro";
const { project } = Astro.props;
const testMode = true;

// Variables de estado iniciales
let currentPage = 0;
const pageSize = 4;
let projects: ProjectModel[] = [];
let totalPages = 0;

const fetchProjects = async (
  page: number
): Promise<ApiResponse<ProjectModel>> => {
  try {
    const res = await fetch(
      `http://localhost:8080/api/v1/projects?page=${page}&size=${pageSize}`
    );
    if (!res.ok) throw new Error(`Error: ${res.status}`);
    const data = await res.json();
    return data;
  } catch (err) {
    console.error("Error fetching projects:", err);
    return {
      message: "Error",
      data: {
        content: [],
        pageable: {
          pageNumber: 0,
          pageSize: 0,
          offset: 0,
          paged: false,
          unpaged: true,
        },
        last: true,
        totalPages: 0,
        totalElements: 0,
        size: 0,
        number: 0,
        sort: { empty: true, unsorted: true, sorted: false },
        numberOfElements: 0,
        first: true,
        empty: true,
      },
    };
  }
};

const loadProjects = async () => {
  const response = await fetchProjects(currentPage);
  projects = response.data.content;
  totalPages = response.data.totalPages;
};
await loadProjects();
---

<section
  id="project"
  class="py-10 text-center bg-gray-100"
  data-current-page={currentPage}
  data-total-pages={totalPages}
  data-page-size={pageSize}
>

  <h2 class="text-3xl font-bold mb-4">{project.title}</h1>

  <!-- Filtro por nombre de proyecto -->
  <div class="mb-6">
    <input
      id="projectSearchInput"
      type="text"
      placeholder="Buscar proyectos..."
      class="w-full md:w-1/2 px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
    <button
      id="searchButton"
      class="mt-2 w-full md:w-1/2 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none"
    >
      Buscar
    </button>
  </div>

  <div id="projectsContainer">
    {
      projects.length === 0 ? (
        <p>No hay proyectos disponibles.</p>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {projects.map((project: ProjectModel) => {
            return <ProjectCard projectContent={project} />;
          })}
        </div>
      )
    }
  </div>

  <!-- Paginación -->
  <div class="mt-4 flex justify-center gap-4">
    <!-- Botón Anterior -->
    <button
      id="prevButton"
      disabled={currentPage === 0}
      class={`py-2 px-4 rounded ${currentPage === 0 ? "bg-gray-400 cursor-not-allowed" : "bg-blue-500 hover:bg-blue-700 text-white"}`}
    >
      Anterior
    </button>

    <p class="py-2">
      Página <span id="currentPageDisplay">{currentPage + 1}</span> de <span
        id="totalPagesDisplay">{totalPages}</span>
    </p>

    <!-- Botón Siguiente -->
    <button
      id="nextButton"
      disabled={currentPage + 1 >= totalPages}
      class={`py-2 px-4 rounded ${currentPage + 1 >= totalPages ? "bg-gray-400 cursor-not-allowed" : "bg-blue-500 hover:bg-blue-700 text-white"}`}
    >
      Siguiente
    </button>
  </div>
</section>

<script is:inline>
  const projectSection = document.getElementById("project");
  let currentPage = parseInt(projectSection.dataset.currentPage, 10);
  const pageSize = parseInt(projectSection.dataset.pageSize, 10);
  let totalPages = parseInt(projectSection.dataset.totalPages, 10);
  const projectsContainer = document.getElementById("projectsContainer");
  const prevButton = document.getElementById("prevButton");
  const nextButton = document.getElementById("nextButton");
  const currentPageDisplay = document.getElementById("currentPageDisplay");
  const totalPagesDisplay = document.getElementById("totalPagesDisplay");
  const searchInput = document.getElementById("projectSearchInput");
  const searchButton = document.getElementById("searchButton");

  // Función para actualizar los proyectos
  const updateProjects = async (page) => {
    try {
      prevButton.disabled = true;
      nextButton.disabled = true;
      let filter =
        searchInput.value.trim().length > 0? "/" + searchInput.value.trim(): "";

      let url =
        "http://localhost:8080/api/v1/projects" +filter +"?page=" +page +"&size=" +pageSize;
      // Realizar la llamada a la API
      const response = await fetch(url);
      const data = await response.json();
      const projects = data.data.content;

      // Limpiar y actualizar el contenedor de proyectos
      projectsContainer.innerHTML = "";
      if (projects.length === 0) {
        projectsContainer.innerHTML = "<p>No hay proyectos disponibles.</p>";
      } else {
        const grid = document.createElement("div");
        grid.className = "grid grid-cols-1 md:grid-cols-2 gap-4";

        // Crear cards dinámicamente (simulando el componente ProjectCard)
        projects.forEach((project) => {
          const card = document.createElement("div");
          card.className = "card py-4 px-6 bg-white shadow-md rounded";
          card.innerHTML = `
           <section id="project" class="py-10 bg-blue-100">
            <h2 class="text-3xl font-bold mb-4">${project.projectName}</h2>
           <p class="text-lg">${project.description}</p>
            <p><strong>Tech:</strong> ${project.technologies.join(", ")}</p> 
            <a class="text-blue-500 hover:underline" href="${project.repositoryUrl}">RepositoryUrl</a>
          `;
          grid.appendChild(card);
        });

        projectsContainer.appendChild(grid);
      }

      // Actualizar estado de los botones y la UI
      currentPage = page;
      currentPageDisplay.textContent = currentPage + 1;
      totalPages = data.data.totalPages;
      totalPagesDisplay.textContent = totalPages;

      updateButtonStyles();
    } catch (error) {
      console.error("Error al actualizar proyectos:", error);
    } finally {
      prevButton.disabled = currentPage === 0;
      nextButton.disabled = currentPage + 1 >= totalPages;
    }
  };

  const updateButtonStyles = () => {
    // Establecer el estilo de los botones según la página
    if (prevButton) {
      prevButton.className =
        currentPage === 0
          ? "py-2 px-4 rounded bg-gray-400 cursor-not-allowed"
          : "py-2 px-4 rounded bg-blue-500 hover:bg-blue-700 text-white";
    }

    if (nextButton) {
      nextButton.className =
        currentPage + 1 >= totalPages
          ? "py-2 px-4 rounded bg-gray-400 cursor-not-allowed"
          : "py-2 px-4 rounded bg-blue-500 hover:bg-blue-700 text-white";
    }
  };

  // Manejadores de eventos para los botones de navegación
  prevButton.addEventListener("click", () => {
    if (currentPage > 0) updateProjects(currentPage - 1);
  });

  nextButton.addEventListener("click", () => {
    if (currentPage + 1 < totalPages) updateProjects(currentPage + 1);
  });

  // Manejador de eventos para el botón de búsqueda

  searchButton.addEventListener("click", () => {
    const searchQuery = searchInput.value.trim();
    if (searchQuery.length >= 3 || searchQuery.length === 0) {
      updateProjects(0);
    } else {
      alert(
        "Por favor, ingresa al menos 3 caracteres para realizar la búsqueda."
      );
      searchInput.value = ""
    }
  });

  // Inicializar el estado de los botones
  prevButton.disabled = currentPage === 0;
  nextButton.disabled = currentPage + 1 >= totalPages;
</script>
