---
// Desestructuramos la propiedad 'contact' desde 'Astro.props' para acceder a la información
const { contact } = Astro.props;  
---

<div id="contact" class="max-w-2xl mx-auto p-6 bg-white shadow-md rounded-lg">
  <!-- Título del formulario de contacto, muestra un valor predeterminado si no se pasa 'contact.form?.title' -->
  <h2 class="text-2xl font-semibold text-center mb-6">{contact.form?.title || "Contacta conmigo"}</h2>

  <!-- Inicio del formulario de contacto -->
  <form id="contactForm">
    <!-- Campo de Nombre -->
    <div class="mb-4">
      <!-- Etiqueta del campo de nombre, con valor predeterminado en caso de que no se pase 'contact.form?.nameLabel' -->
      <label for="name" class="block text-gray-700 font-medium mb-2">{contact.form?.nameLabel || "Nombre:"}</label>
      
      <!-- Campo de entrada para el nombre con un placeholder predeterminado en caso de que no se pase 'contact.form?.namePlaceholder' -->
      <input
        type="text"
        id="name"
        name="name"
        class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        placeholder={contact.form?.namePlaceholder || "Introduce tu nombre"}
        required
      />
      <small id="nameError" class="text-red-500 text-sm hidden">{contact.form?.nameError || "El nombre debe comenzar con mayúscula y el resto en minúsculas."}</small>
    </div>

    <!-- Campo de Email -->
    <div class="mb-4">
      <!-- Etiqueta del campo de email con un placeholder predeterminado en caso de que no se pase 'contact.form?.emailPlaceholder' -->
      <label for="email" class="block text-gray-700 font-medium mb-2">{contact.form?.emailLabel || "Email:"}</label>
      <input
        type="email"
        id="email"
        name="email"
        class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        placeholder={contact.form?.emailPlaceholder || "Introduce tu email"}
        required
      />
      <!-- Mensaje de error para el email, inicialmente oculto -->
      <small id="emailError" class="text-red-500 text-sm hidden">{contact.form?.emailError || "El email debe ser valido."}</small>
    </div>

    <!-- Campo de Mensaje -->
    <div class="mb-4">
      <!-- Etiqueta del campo de mensaje con detección del idioma -->
      <label for="message" class="block text-gray-700 font-medium mb-2">{contact.form?.messageLabel || "Mensaje:"}</label>

      <!-- Área de texto para el mensaje con un placeholder predeterminado en caso de que no se pase 'contact.form?.messagePlaceholder' -->
      <textarea
        id="message"
        name="message"
        class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        placeholder={contact.form?.messagePlaceholder || "Escribe tu mensaje"}
        required
      ></textarea>

      <!-- Mensaje de error para el mensaje, inicialmente oculto -->
      <small id="messageError" class="text-red-500 text-sm hidden">{contact.form?.messageError || "El mensaje debe tener al menos 20 caracteres."}</small>
    </div>

    <!-- Botón de Enviar -->
    <button
      type="submit"
      id="submitButton"
      class="w-full py-3 bg-blue-600 text-white font-medium rounded-md disabled:bg-gray-400"
      disabled
    >
      <!-- El texto del botón se adapta según el idioma (con valor predeterminado) -->
      {contact.form?.submitButton || "Enviar"}
    </button>
  </form>

  <!-- Mensaje de confirmación, inicialmente oculto -->
  <div id="confirmationMessage" class="hidden text-center text-green-600 mt-4">
    <p>{contact.form?.confirmationMessage || "¡Gracias por tu mensaje!Nos pondremos en contacto contigo pronto."}</p>
  </div>
</div>

<script>
  // Tipado de los elementos del DOM, para trabajar con TypeScript
  const form = document.getElementById("contactForm") as HTMLFormElement | null;
  const submitButton = document.getElementById("submitButton") as HTMLButtonElement | null;
  const confirmationMessage = document.getElementById("confirmationMessage") as HTMLDivElement | null;

  // Funciones de validación con tipos explícitos

  // Valida si el nombre sigue el formato de empezar con mayúscula
  const validateName = (name: string): boolean => /^[A-Z][a-z]*$/.test(name);
  // Valida si el email tiene el formato correcto
  const validateEmail = (email: string): boolean => /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email);
  // Valida si el mensaje tiene al menos 20 caracteres
  const validateMessage = (message: string): boolean => message.length >= 20;

  /**
   * Función para manejar el envío del formulario evitando el comportamiento por defecto.
   * Si el formulario es válido, muestra el mensaje de confirmación y limpia el formulario.
   *  */ 
  const handleSubmit = (event: Event): void => {
    event.preventDefault(); 

    if (validateForm()) {
    
      if (confirmationMessage) {
        confirmationMessage.classList.remove("hidden");
      }

      if (form) {
        form.reset();
      }

    }
  };

  // Función para validar todos los campos del formulario
  const validateForm = (): boolean => {
    if (!form || !submitButton) return false;

    // Obtiene los valores de los campos
    const nameInput = document.getElementById("name") as HTMLInputElement | null;
    const emailInput = document.getElementById("email") as HTMLInputElement | null;
    const messageInput = document.getElementById("message") as HTMLTextAreaElement | null;

    if (!nameInput || !emailInput || !messageInput) return false;

    const name = nameInput.value;
    const email = emailInput.value;
    const message = messageInput.value;

    let isValid = true;

    // Validación de Nombre
    if (!validateName(name)) {
      document.getElementById("nameError")!.classList.remove("hidden");
      isValid = false;
    } else {
      document.getElementById("nameError")!.classList.add("hidden");
    }

    // Validación de Email
    if (!validateEmail(email)) {
      document.getElementById("emailError")!.classList.remove("hidden");
      isValid = false;
    } else {
      document.getElementById("emailError")!.classList.add("hidden");
    }

    // Validación de Mensaje
    if (!validateMessage(message)) {
      document.getElementById("messageError")!.classList.remove("hidden");
      isValid = false;
    } else {
      document.getElementById("messageError")!.classList.add("hidden");
    }

    // Habilitar/deshabilitar el botón de enviar según la validez del formulario
    if (submitButton) {
      submitButton.disabled = !isValid;
    }

    return isValid;
  };

  // Agregar escuchadores de eventos para validar en tiempo real
  if (form) {
    form.addEventListener("input", validateForm);
  }

  // Asociar el envío del formulario con el manejador de eventos
  if (form) {
    form.addEventListener("submit", handleSubmit);
  }
</script>

